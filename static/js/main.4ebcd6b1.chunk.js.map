{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","robots.js","App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","src_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","username","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","filteredRobots","filter","toLowerCase","includes","src_SearchBox","src_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ebcd6b1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt ='robots' src={`https://robohash.org/${id}?size=200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ( { robots }) => {\r\n    return (\r\n      <div>\r\n        {\r\n           robots.map((user, i) => {\r\n            return (\r\n                <Card \r\n                key={i} \r\n                id={robots[i].id} \r\n                name={robots[i].name} \r\n                email={robots[i].email} \r\n                />\r\n            );\r\n        })  \r\n    }\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n        <input \r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search' \r\n        placeholder='search robots' \r\n        onChange={searchChange}\r\n        />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","export const robots = [\r\n    {\r\n        id: 1,\r\n        name: 'Mabel Bell',\r\n        username: 'Mabel',\r\n        email: 'mabel@bell.net'\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'Stephen Hawking',\r\n        username: 'Stephen',\r\n        email: 'stephen@physicsex.com'\r\n    },\r\n    {\r\n        id: 3,\r\n        name: 'Clementine Churchill',\r\n        username: 'Clementine',\r\n        email: 'clem@kansascitycanal.com'\r\n    },\r\n    {\r\n        id: 4,\r\n        name: 'Thomas Edison',\r\n        username: 'Tom',\r\n        email: 'tom@menlopark.com'\r\n    },\r\n    {\r\n        id: 5,\r\n        name: 'Wilbur Wright',\r\n        username: 'Wil',\r\n        email: 'wil@cycles.com'\r\n    },\r\n    {\r\n        id: 6,\r\n        name: 'Orville Wright',\r\n        username: 'Orv',\r\n        email: 'orv@cycles.com'\r\n    },\r\n    {\r\n        id: 7,\r\n        name: 'Nikola Tesla',\r\n        username: 'Nikola',\r\n        email: 'nik@oscillators.com'\r\n    },\r\n    {\r\n        id: 8,\r\n        name: 'Alexander Bell',\r\n        username: 'Alec',\r\n        email: 'alec.bell@bell.net'\r\n    },\r\n    {\r\n        id: 9,\r\n        name: 'George Westinghouse',\r\n        username: 'George',\r\n        email: 'george@westinghouse.com'\r\n    },\r\n    {\r\n        id: 10,\r\n        name: 'Mark Twain',\r\n        username: 'Mark',\r\n        email: 'sam@clemons.com'\r\n    },\r\n    {\r\n        id: 11,\r\n        name: 'JP Morgan',\r\n        username: 'JP',\r\n        email: 'jp@morgan.net'\r\n    },\r\n]","import React, {Component} from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport {robots} from './robots';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    constructor () {\r\n        super()\r\n        this.state = {\r\n            robots: robots,\r\n            searchfield: '' \r\n        }\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value})\r\n         }\r\n\r\n    render () {\r\n            const filteredRobots = this.state.robots.filter(robots => {\r\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n            })\r\n        return (\r\n        <div className='tc'>        \r\n            <h1 className='f1'>RoboFriends</h1>\r\n            <SearchBox searchChange={this.onSearchChange} />\r\n            <CardList robots={filteredRobots}/>\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}